#!/bin/bash

# This script uses Rofi to select an Oh My Posh theme and provides options
# to apply it, view its section on the documentation page, or browse image previews
# from a local JSON file generated by scrape-posh-previews.sh.
# It uses 'loupe' to display image previews.
# It requires Rofi, Oh My Posh, jq, loupe, and a web browser configured with xdg-open (for docs).

# --- Configuration ---

# Path to your Oh My Posh themes directory.
THEMES_DIR="$HOME/.poshthemes"

# Path to your fish configuration file.
FISH_CONFIG="$HOME/.config/fish/config.fish"

# Base URL for Oh My Posh theme documentation
OHMYPOSH_THEMES_URL="https://ohmyposh.dev/docs/themes"

# Base URL for Oh My Posh website (for constructing absolute image URLs)
OHMYPOSH_BASE_URL="https://ohmyposh.dev"

# Path to the local JSON file containing image URLs (generated by scrape-posh-previews.sh).
PREVIEWS_JSON_FILE="$HOME/.config/oh-my-posh/theme_previews.json"

# --- Script Logic ---

# Check dependencies
if ! command -v rofi &>/dev/null; then
  echo "Error: Rofi is not installed."
  echo "Please install Rofi (e.g., sudo pacman -S rofi) to run this script."
  exit 1
fi

if ! command -v xdg-open &>/dev/null; then
  echo "Error: xdg-open is not installed."
  echo "Please install xdg-utils (e.g., sudo pacman -S xdg-utils) to use the documentation feature."
  XDG_OPEN_AVAILABLE=false
else
  XDG_OPEN_AVAILABLE=true
fi

if ! command -v jq &>/dev/null; then
  echo "Error: jq is not installed."
  echo "Please install jq (e.g., sudo pacman -S jq) to read the local preview file."
  JQ_AVAILABLE=false
else
  JQ_AVAILABLE=true
fi

# Check for loupe instead of sxiv
if ! command -v loupe &>/dev/null; then
  echo "Error: loupe (GNOME Image Viewer) is not installed or not in your PATH."
  echo "Please install loupe or ensure it's accessible."
  LOUPE_AVAILABLE=false
else
  LOUPE_AVAILABLE=true
fi

# Check if the themes directory exists
if [ ! -d "$THEMES_DIR" ]; then
  echo "Error: Oh My Posh themes directory not found at $THEMES_DIR."
  echo "Please ensure Oh My Posh is installed and themes are in this location."
  exit 1
fi

# List available themes (files ending in .omp.json) and remove the extension for display
theme_list=$(find "$THEMES_DIR" -maxdepth 1 -name "*.omp.json" -printf "%f\n" | sed 's/\.omp\.json$//')

# Add the "Browse Previews" option to the list if jq and loupe are available and the preview file exists
if [ "$JQ_AVAILABLE" = true ] && [ "$LOUPE_AVAILABLE" = true ] && [ -f "$PREVIEWS_JSON_FILE" ]; then
  theme_list="Browse Local Previews\n$theme_list"
elif [ "$JQ_AVAILABLE" = true ]; then
  # jq is available but loupe or the preview file is not
  theme_list="Generate Local Previews (Run Scraper)\n$theme_list"
fi

# Use Rofi to display the list of themes and get the user's selection
selected_item=$(echo -e "$theme_list" | rofi -dmenu -p "Select Oh My Posh Theme or Action:")

# Check if an item was selected
if [ -z "$selected_item" ]; then
  echo "No item selected. Exiting."
  exit 0
fi

# --- Handle Selection ---

case "$selected_item" in
"Browse Local Previews")
  # --- Browse Local Previews Mode ---
  if [ "$LOUPE_AVAILABLE" = false ]; then
    echo "Cannot browse previews: loupe is not available."
    exit 1
  fi
  if [ "$JQ_AVAILABLE" = false ]; then
    echo "Cannot browse local previews: jq is not available."
    exit 1
  fi
  if [ ! -f "$PREVIEWS_JSON_FILE" ]; then
    echo "Local preview file not found: $PREVIEWS_JSON_FILE"
    echo "Please run the scraper script (scrape-posh-previews.sh) first."
    exit 1
  fi

  echo "Reading image URLs from local file: $PREVIEWS_JSON_FILE..."
  # Read image URLs from the local JSON file using jq
  image_urls=$(jq -r '.[]' "$PREVIEWS_JSON_FILE" | sed "s|^|$OHMYPOSH_BASE_URL|") # Prepending the base URL

  # Check if any image URLs were found in the file
  if [ -z "$image_urls" ]; then
    echo "No image URLs found in the local preview file."
    echo "The file might be empty or corrupted. Try running the scraper script again."
    exit 0
  fi

  # --- Prepare list for Rofi with theme names and URLs ---
  rofi_preview_list=""
  while IFS= read -r url; do
    # Clean the URL by removing trailing quotes if any
    cleaned_url="${url%\"}"
    filename=$(basename "$cleaned_url")
    theme_name=$(echo "$filename" | sed -E 's/-[0-9a-f]{32}\.(png|jpg)$//' | sed 's/\.minimal$//')
    rofi_preview_list+="${theme_name} --- ${cleaned_url}\n"
  done <<<"$image_urls"

  # Remove the last newline character
  rofi_preview_list=$(echo -e "$rofi_preview_list" | head -n -1)

  # Use Rofi to display the list of theme names
  selected_line=$(echo -e "$rofi_preview_list" | rofi -dmenu -p "Select Image Preview:")

  if [ -z "$selected_line" ]; then
    echo "No image preview selected from Rofi. User likely cancelled or Rofi returned empty."
    exit 0
  fi

  # --- Extract URL from the selected line ---
  selected_image_url=$(echo "$selected_line" | awk -F ' --- ' '{print $2}')

  # --- Download the Image ---
  temp_image="/tmp/posh_image_preview.png"
  echo "Downloading image to temporary file: $temp_image"
  curl -s -o "$temp_image" "$selected_image_url"

  # Check if the image download was successful
  if [ ! -f "$temp_image" ]; then
    echo "Error: Failed to download the image. Please check the URL and try again."
    exit 1
  fi

  # Open the downloaded image with loupe
  echo "Opening downloaded image with loupe: $temp_image"
  loupe "$temp_image" & # Use '&' to run loupe in the background so Rofi closes

  ;;
"Generate Local Previews (Run Scraper)")
  # --- Run Scraper Mode ---
  echo "Running the scraper script to generate local previews..."
  scrape-posh-previews.sh
  echo "Please run the theme switcher script again to browse local previews."
  ;;
*)
  # --- Theme Selection Mode ---
  # The selected item is a theme name

  options="Apply Theme\nShow Documentation Section"

  if [ "$XDG_OPEN_AVAILABLE" = false ]; then
    options="Apply Theme"
  fi

  selected_action=$(echo -e "$options" | rofi -dmenu -p "Action for '$selected_item':")

  # --- Perform Action for Theme ---
  case "$selected_action" in
  "Apply Theme")
    # Construct the full absolute path to the selected theme file
    selected_theme_path="$THEMES_DIR/${selected_item}.omp.json"

    # Check if the selected theme file exists
    if [ ! -f "$selected_theme_path" ]; then
      echo "Error: Selected theme file not found: $selected_theme_path"
      exit 1
    fi

    echo "Updating Oh My Posh theme in $FISH_CONFIG using ex..."

    # Use ex to update the Fish config with the selected theme
    ex -s "$FISH_CONFIG" <<EOF
/oh-my-posh init fish/
c
oh-my-posh init fish --config "$selected_theme_path" | source
.
x
EOF
    ;;
  "Show Documentation Section")
    # Open the theme documentation section in the web browser
    echo "Opening documentation for the selected theme..."
    xdg-open "$OHMYPOSH_THEMES_URL#$selected_item" &
    ;;
  *)
    echo "Invalid option selected. Exiting."
    exit 1
    ;;
  esac
  ;;
esac
