#!/bin/bash

# This script uses Rofi to select an Oh My Posh theme and provides options
# to apply it, view its section on the documentation page, or browse image previews
# from a local JSON file generated by scrape-posh-previews.sh.
# It requires Rofi, Oh My Posh, jq, and a web browser configured with xdg-open.

# --- Configuration ---

# Path to your Oh My Posh themes directory.
THEMES_DIR="$HOME/.poshthemes"

# Path to your fish configuration file.
FISH_CONFIG="$HOME/.config/fish/config.fish"

# Base URL for Oh My Posh theme documentation
OHMYPOSH_THEMES_URL="https://ohmyposh.dev/docs/themes"

# Path to the local JSON file containing image URLs (generated by scrape-posh-previews.sh).
PREVIEWS_JSON_FILE="$HOME/.config/oh-my-posh/theme_previews.json"

# --- Script Logic ---

# Check dependencies
if ! command -v rofi &> /dev/null; then
    echo "Error: Rofi is not installed."
    echo "Please install Rofi (e.g., sudo pacman -S rofi) to run this script."
    exit 1
fi

if ! command -v xdg-open &> /dev/null; then
    echo "Error: xdg-open is not installed."
    echo "Please install xdg-utils (e.g., sudo pacman -S xdg-utils) to use the preview feature."
    XDG_OPEN_AVAILABLE=false
else
    XDG_OPEN_AVAILABLE=true
fi

if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed."
    echo "Please install jq (e.g., sudo pacman -S jq) to read the local preview file."
    JQ_AVAILABLE=false
else
    JQ_AVAILABLE=true
fi

# Check if the themes directory exists
if [ ! -d "$THEMES_DIR" ]; then
    echo "Error: Oh My Posh themes directory not found at $THEMES_DIR."
    echo "Please ensure Oh My Posh is installed and themes are in this location."
    exit 1
fi

# List available themes (files ending in .omp.json) and remove the extension for display
theme_list=$(find "$THEMES_DIR" -maxdepth 1 -name "*.omp.json" -printf "%f\n" | sed 's/\.omp\.json$//')

# Add the "Browse Previews" option to the list if jq is available and the preview file exists
if [ "$JQ_AVAILABLE" = true ] && [ -f "$PREVIEWS_JSON_FILE" ]; then
    theme_list="Browse Local Previews\n$theme_list"
elif [ "$JQ_AVAILABLE" = true ]; then
     # jq is available but the preview file is not
     theme_list="Generate Local Previews (Run Scraper)\n$theme_list"
fi


# Use Rofi to display the list of themes and get the user's selection
selected_item=$(echo -e "$theme_list" | rofi -dmenu -p "Select Oh My Posh Theme or Action:")

# Check if an item was selected
if [ -z "$selected_item" ]; then
    echo "No item selected. Exiting."
    exit 0
fi

# --- Handle Selection ---

case "$selected_item" in
    "Browse Local Previews")
        # --- Browse Local Previews Mode ---
        if [ "$XDG_OPEN_AVAILABLE" = false ]; then
             echo "Cannot open previews: xdg-open is not available."
             exit 1
        fi
        if [ "$JQ_AVAILABLE" = false ]; then
             echo "Cannot browse local previews: jq is not available."
             exit 1
        fi
        if [ ! -f "$PREVIEWS_JSON_FILE" ]; then
             echo "Local preview file not found: $PREVIEWS_JSON_FILE"
             echo "Please run the scraper script (scrape-posh-previews.sh) first."
             exit 1
        fi

        echo "Reading image URLs from local file: $PREVIEWS_JSON_FILE..."
        # Read image URLs from the local JSON file using jq
        # jq -r '.[]' extracts each element from the JSON array as a raw string
        image_urls=$(jq -r '.[]' "$PREVIEWS_JSON_FILE")

        # Check if any image URLs were found in the file
        if [ -z "$image_urls" ]; then
            echo "No image URLs found in the local preview file."
            echo "The file might be empty or corrupted. Try running the scraper script again."
            exit 0
        fi

        # Use Rofi to display the list of image URLs
        selected_image_url=$(echo -e "$image_urls" | rofi -dmenu -p "Select Image Preview:")

        # Check if an image URL was selected
        if [ -z "$selected_image_url" ]; then
            echo "No image preview selected. Exiting."
            exit 0
        fi

        # Open the selected image URL
        echo "Opening image: $selected_image_url"
        xdg-open "$selected_image_url"
        ;;
    "Generate Local Previews (Run Scraper)")
        # --- Run Scraper Mode ---
        echo "Running the scraper script to generate local previews..."
        # Execute the scraper script
        scrape-posh-previews.sh
        # Inform the user to run the theme switcher again after scraping
        echo "Please run the theme switcher script again to browse local previews."
        ;;
    *)
        # --- Theme Selection Mode ---
        # The selected item is a theme name

        # Offer the user a choice: Apply theme or Show documentation section
        options="Apply Theme\nShow Documentation Section"

        # Only show Show Documentation option if xdg-open is available
        if [ "$XDG_OPEN_AVAILABLE" = false ]; then
            options="Apply Theme"
        fi

        selected_action=$(echo -e "$options" | rofi -dmenu -p "Action for '$selected_item':")

        # --- Perform Action for Theme ---

        case "$selected_action" in
            "Apply Theme")
                # Construct the full absolute path to the selected theme file
                selected_theme_path="$THEMES_DIR/${selected_item}.omp.json"

                # Check if the selected theme file actually exists (safety check)
                if [ ! -f "$selected_theme_path" ]; then
                    echo "Error: Selected theme file not found: $selected_theme_path"
                    exit 1
                fi

                # Update the oh-my-posh initialization line in the fish config file.
                # This sed command finds the line starting with 'oh-my-posh init fish',
                # captures the beginning part including '--config ', and replaces the rest
                # of the line with the new theme path and '| source'.
                # Using '/' as the delimiter.
                sed -i 's/^\(\s*oh-my-posh init fish\s\+--config \).*/\1'"$selected_theme_path"' | source/' "$FISH_CONFIG"

                # Inform the user that the change has been made
                echo "Oh My Posh theme updated to: $selected_item"
                echo "Please open a new terminal session (or source your config.fish) for the changes to take effect."
                ;;
            "Show Documentation Section")
                # Construct the URL for the theme page section.
                # Theme names often match the section IDs on the docs page, but might need
                # lowercasing and hyphens instead of spaces. This is a basic conversion.
                theme_url_name=$(echo "$selected_item" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
                preview_url="${OHMYPOSH_THEMES_URL}#${theme_url_name}"

                echo "Opening documentation section for '$selected_item' in browser: $preview_url"
                xdg-open "$preview_url"
                ;;
            *)
                # User cancelled the action selection
                echo "No action selected. Exiting."
                ;;
        esac
        ;; # End of Theme Selection Mode case
esac # End of main case statement

exit 0

